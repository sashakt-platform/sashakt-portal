name: Deploy Sashakt portal to staging

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: staging
    outputs:
      build-exists: ${{ steps.build-check.outputs.build-exists }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build SvelteKit app
        run: pnpm run build

      - name: Check build output
        id: build-check
        run: |
          if [ -d "./build" ]; then
            echo "build-exists=true" >> $GITHUB_OUTPUT
          else
            echo "build-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: steps.build-check.outputs.build-exists == 'true'
        with:
          name: sveltekit-build
          path: ./build
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    if: needs.build.outputs.build-exists == 'true'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: sveltekit-build
          path: ./build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync ./build s3://${{ secrets.AWS_S3_BUCKET_NAME }} \
            --delete \
            --exact-timestamps \
            --cache-control "public,max-age=31536000,immutable" \
            --exclude "*.html" \
            --exclude "service-worker.js"
            
          aws s3 sync ./build s3://${{ secrets.AWS_S3_BUCKET_NAME }} \
            --delete \
            --exact-timestamps \
            --cache-control "public,max-age=0,must-revalidate" \
            --include "*.html" \
            --include "service-worker.js"
